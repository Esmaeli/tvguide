import json import re import requests from datetime import datetime import pytz # Function to fetch data from the internet def fetch_data_from_url(url): try: response = requests.get(url) response.raise_for_status() return response.json() except requests.exceptions.RequestException as e: print(f"Error fetching data from {url}: {e}") return None # Function to convert UK time to local user time def convert_to_local_time(uk_time_str): try: if not uk_time_str or uk_time_str == 'N/A': return 'N/A' # Define UK time format and parse the input string uk_time_format = "%H:%M" uk_time = datetime.strptime(uk_time_str, uk_time_format) # Assume UK is UTC+0 utc_time = pytz.utc.localize(datetime.combine(datetime.today(), uk_time.time())) # Get the user's local timezone local_tz = pytz.timezone(pytz.all_timezones[-1]) # Default to last timezone in list local_time = utc_time.astimezone(local_tz) # Return only the time in HH:MM format return local_time.strftime("%H:%M") except Exception as e: print(f"Error converting time: {e}") return uk_time_str # Function to extract channels from event data def extract_channels(event): channels_list = [] for field in ['channels', 'channels2']: if isinstance(event.get(field), dict): channels_list += [channel['channel_name'] for channel in event[field].values() if isinstance(channel, dict) and 'channel_name' in channel] elif isinstance(event.get(field), list): channels_list += [channel['channel_name'] for channel in event[field] if isinstance(channel, dict) and 'channel_name' in channel] elif isinstance(event.get(field), str): channels_list.append(event[field]) return channels_list # Function to detect the type of event and format it for HTML def format_event(event, category): event_text = event.get('event', '') time = event.get('time', 'N/A') channels = extract_channels(event) local_time = convert_to_local_time(time) # Handle Women's events is_women_event = "women" in event_text.lower() women_icon = "ðŸ‘©â€�ðŸ¦°" if is_women_event else "" # Detect the type of event (using Regular Expression) if ':' in event_text and re.search(r'\b(vs|\.vs|x)\b', event_text, re.IGNORECASE): # Sporting event with two teams event_parts = event_text.split(':') category_name = event_parts[0].strip() teams_part = event_parts[1].strip() match = re.search(r'(.+?)\s*(vs|\.vs|x)\s*(.+)', teams_part, re.IGNORECASE) if match: team_1 = match.group(1).strip() team_2 = match.group(3).strip() # Handle youth teams youth_pattern = r'U\s?\d+' team_1_icon = 'ðŸ‘¦' if re.search(youth_pattern, team_1) else "" team_2_icon = 'ðŸ‘¦' if re.search(youth_pattern, team_2) else "" return ( f'{women_icon}<div class="card" data-sport="{category}">' f'<h3>{category_name}</h3>' f'<div class="teams">' f'<span class="team-left">{team_1_icon}{team_1}</span>' f'<span class="vs">vs</span>' f'<span class="team-right">{team_2}{team_2_icon}</span>' f'</div>' f'<p class="time">â�° {local_time}</p>' f'<p class="channels">Channels: {", ".join(channels) if channels else "N/A"}</p>' f'</div>{women_icon}' ) elif ':' in event_text and not re.search(r'\b(vs|\.vs|x)\b', event_text, re.IGNORECASE): # Single sporting event event_parts = event_text.split(':') category_name = event_parts[0].strip() single_event = event_parts[1].strip() return ( f'{women_icon}<div class="card single-event" data-sport="{category}">' f'<h3>{category_name}</h3>' f'<p class="event-name">{single_event.upper()}</p>' f'<p class="time">â�° {local_time}</p>' f'<p class="channels">Channels: {", ".join(channels) if channels else "N/A"}</p>' f'</div>{women_icon}' ) else: # Other events (e.g., WWE NXT) or invalid events return ( f'{women_icon}<div class="card" data-sport="{category}">' f'<h3>{event_text.upper()}</h3>' f'<p class="event-name">{category.upper()}</p>' f'<p class="time">â�° {local_time}</p>' f'<p class="channels">Channels: {", ".join(channels) if channels else "N/A"}</p>' f'</div>{women_icon}' ) # Main function to process data and write to index.html def main(): url = "https://daddylive.mp/schedule/schedule-generated.json" json_data = fetch_data_from_url(url) if not json_data: print("Failed to fetch data. Exiting...") return # Define fixed categories fixed_categories = ['all', 'Soccer', 'Volleyball', 'Basketball', 'Handball', 'Tennis', 'Hockey', 'Cricket', 'Boxing', 'WWE'] # Priority leagues for Soccer priority_leagues = [ "England", "Spain", "Italy", "France", "Germany", "Bundesliga", "Saudi Arabia", "Saudi", "Arabia", "Turkey" ] # Extract all unique categories from the JSON data tv_shows_variations = ["TV Shows", "TV show", "TVshows", "tvshow", "Episode"] all_categories = sorted(set([category for date, events in json_data.items() for category in events.keys() if category not in tv_shows_variations])) # Separate primary categories and more categories primary_categories = fixed_categories.copy() more_categories = [] for category in all_categories: if category not in fixed_categories: matched = False for fixed_category in fixed_categories[1:]: if fixed_category.lower() in category.lower(): matched = True break if not matched: more_categories.append(category) # Capitalize multi-part categories more_categories = [category.title() for category in more_categories] # Fix "Wwe" to "WWE" in primary categories primary_categories = [category.upper() if category.lower() == "wwe" else category.capitalize() for category in primary_categories] # Open the index.html file for writing with open('index.html', 'w', encoding='utf-8') as output_file: output_file.write('<!DOCTYPE html>\n<html lang="en">\n<head>\n') output_file.write('<meta charset="UTF-8">\n<meta name="viewport" content="width=device-width, initial-scale=1.0">\n') output_file.write('<title>Sportify - Your Sports Events Hub</title>\n') output_file.write('<link rel="stylesheet" href="styles.css">\n</head>\n<body>\n') # Header Section output_file.write('<header><div class="container"><h1>Sportify</h1>') output_file.write('<div class="menu-icon">â˜°</div><nav><ul class="nav-links">') # Write primary categories to the navigation menu with icons sport_icons = { "Soccer": "âš½", "Volleyball": "ðŸ��", "Basketball": "ðŸ�€", "Handball": "ðŸ¤¾", "Tennis": "ðŸŽ¾", "Hockey": "ðŸ�’", "Cricket": "ðŸ��", "Boxing": "ðŸ¥Š", "WWE": "ðŸ’ª" } for category in primary_categories: icon = sport_icons.get(category, "") output_file.write(f'<li><a href="#" data-sport="{category.lower()}">{icon} {category}</a></li>\n') # Add "More Events" dropdown if there are more categories if more_categories: output_file.write('<li class="dropdown"><a href="#" class="dropbtn">More Events</a>') output_file.write('<div class="dropdown-content">\n') for category in more_categories: output_file.write(f'<a href="#" data-sport="{category.lower()}">{category}</a>\n') output_file.write('</div></li>') output_file.write('</ul><div class="search-box"><input type="text" id="searchInput" placeholder="Search events..."></div></nav></div></header>\n') # Main Content Section output_file.write('<main><div class="container"><section id="events"><h2>Today\'s Events</h2><div class="event-cards">\n') # Traverse the JSON structure and assign events to appropriate categories for date, events in json_data.items(): # Create two lists: priority and regular priority_events = [] regular_events = [] for category, event_list in events.items(): # Skip TV Shows variations if category in tv_shows_variations: continue # Process Soccer category with priority leagues if category.lower() == "soccer": for event in event_list: is_priority = any(league.lower() in event.get('event', '').lower() for league in priority_leagues) (priority_events if is_priority else regular_events).append((category, event)) else: regular_events.extend([(category, e) for e in event_list]) # Write priority events first for category, event in priority_events: formatted_event = format_event(event, category.lower()) if formatted_event: output_file.write(formatted_event) # Then write regular events for category, event in regular_events: formatted_event = format_event(event, category.lower()) if formatted_event: output_file.write(formatted_event) output_file.write('</div></section></div></main>\n') # Footer Section output_file.write('<footer><div class="container"><p>&copy; 2025 Sportify. All rights reserved.</p></div></footer>\n') output_file.write('<script src="script.js"></script>\n</body>\n</html>') print("index.html has been successfully created.") if __name__ == "__main__": main()
